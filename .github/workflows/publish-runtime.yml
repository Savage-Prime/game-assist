name: publish-runtime
on:
    push:
        branches: [main]

permissions:
    contents: write

jobs:
    build-and-publish:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - uses: actions/setup-node@v4
              with: { node-version: 20, cache: "npm" }

            # Install dev deps to build TS â†’ JS
            - run: npm ci
            - run: npm run build

            # Stage only what prod needs
            - name: Prepare runtime payload
              run: |
                  rm -rf publish
                  mkdir -p publish
                  # required for prod install + lockfile integrity
                  cp package.json publish/
                  cp package-lock.json publish/ || true
                  # compiled JS
                  cp -r bin publish/
                  # include any assets your bot loads at runtime (if any)
                  # cp -r assets publish/  # <- example

                  # (optional) strip devDependencies in the published package.json
                  node -e "const fs=require('fs');const p=require('./publish/package.json');delete p.devDependencies;fs.writeFileSync('./publish/package.json', JSON.stringify(p,null,2));"

            # Commit to runtime branch
            - name: Publish to runtime branch
              run: |
                  set -euo pipefail
                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

                  # fetch runtime branch (create if missing)
                  git fetch origin runtime || true
                  if git show-ref --verify --quiet refs/remotes/origin/runtime; then
                    BASE="origin/runtime"
                    echo "Runtime branch exists, using ${BASE}"
                  else
                    # first-time creation: base off empty tree
                    BASE=""
                    echo "Runtime branch doesn't exist, will create new branch"
                  fi

                  # make a worktree at ../rt from runtime (or create it)
                  if [ -n "${BASE}" ]; then
                    git worktree add ../rt "${BASE}"
                  else
                    git worktree add -b runtime ../rt
                  fi

                  # replace contents with the build output
                  rsync -a --delete publish/ ../rt/

                  # commit & push normally (no force)
                  cd ../rt
                  git add -A

                  # Check if there are actually changes to commit
                  if git diff --cached --quiet; then
                    echo "No changes to commit"
                  else
                    git commit -m "runtime: build from ${GITHUB_SHA}"
                    # ensure branch exists on origin; this is a regular push, not -f
                    git push origin HEAD:runtime
                    echo "Successfully pushed runtime build"
                  fi

                  # cleanup worktree
                  cd ..
                  git worktree remove rt
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
