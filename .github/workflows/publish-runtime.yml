name: publish-runtime
on:
    push:
        branches: [main]

permissions:
    contents: write

jobs:
    build-and-publish:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - uses: actions/setup-node@v4
              with: { node-version: 20, cache: "npm" }

            # Install dev deps to build TS â†’ JS
            - run: npm ci
            - run: npm run build

            # Stage only what prod needs
            - name: Prepare runtime payload
              run: |
                  rm -rf publish
                  mkdir -p publish
                  # required for prod install + lockfile integrity
                  cp package.json publish/
                  cp package-lock.json publish/ || true
                  # compiled JS
                  cp -r bin publish/
                  # include any assets your bot loads at runtime (if any)
                  # cp -r assets publish/  # <- example

                  # (optional) strip devDependencies in the published package.json
                  node -e "const fs=require('fs');const p=require('./publish/package.json');delete p.devDependencies;fs.writeFileSync('./publish/package.json', JSON.stringify(p,null,2));"

            - name: Ensure not in detached HEAD
              run: |
                  # If we're in detached HEAD, checkout main to get a branch context
                  if [ "$(git symbolic-ref --short HEAD || echo detached)" = "detached" ]; then
                    git checkout main
                  fi

            # Commit to runtime branch
            - name: Publish to runtime branch
              run: |
                  set -euo pipefail
                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

                  # fetch runtime branch (create if missing)
                  git fetch origin runtime || true
                  if git show-ref --verify --quiet refs/remotes/origin/runtime; then
                    BASE="origin/runtime"
                    echo "Runtime branch exists, using ${BASE}"
                  else
                    # first-time creation: base off empty tree
                    BASE=""
                    echo "Runtime branch doesn't exist, will create new branch"
                  fi

                  # Only add a worktree if not already on the runtime branch
                  if [ "$(git rev-parse --abbrev-ref HEAD)" = "runtime" ]; then
                    TARGET_DIR="."
                    echo "Already on runtime branch, working in place"
                  else
                    # Remove any previous worktree if exists
                    git worktree prune
                    # Add worktree for runtime branch
                    if [ -n "${BASE}" ]; then
                      git worktree add ../rt "${BASE}"
                    else
                      git worktree add -b runtime ../rt
                    fi
                    TARGET_DIR="../rt"
                    echo "Created worktree at ${TARGET_DIR}"
                  fi

                  # replace contents with the build output
                  rsync -a --delete publish/ $TARGET_DIR/

                  # commit & push normally (no force)
                  cd $TARGET_DIR

                  # Verify we're in a proper git repository/worktree
                  if ! git status &>/dev/null; then
                    echo "Error: Not in a valid git repository. Debugging info:"
                    pwd
                    ls -la
                    echo "Checking parent directory:"
                    ls -la ..
                    exit 1
                  fi
                  git add -A

                  # Check if there are actually changes to commit
                  if git diff --cached --quiet; then
                    echo "No changes to commit"
                  else
                    # Show what we're building from for history tracking
                    echo "Creating new runtime commit on top of $(git rev-parse --short HEAD)"
                    git commit -m "runtime: build from ${GITHUB_SHA}"
                    # ensure branch exists on origin; this is a regular push, not -f
                    # This preserves the full commit history of the runtime branch
                    git push origin HEAD:runtime
                    echo "Successfully pushed runtime build"
                  fi

                  # cleanup worktree (only if we created one)
                  if [ "$TARGET_DIR" = "../rt" ]; then
                    cd ..
                    git worktree remove rt
                    echo "Cleaned up worktree"
                  else
                    echo "No worktree cleanup needed"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
